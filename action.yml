name: "Download and execute autodock"
description: "Download the latest autodock Linux AMD64 binary and run its deploy command"

inputs:
  compose_file_path:
    description: 'Optional path to a Docker Compose file'
    required: false
    default: './docker-compose.yml'
  args:
    description: 'arguments for autodock'
    required: false
    default: ""
  binary_asset_name:
    description: 'Base name of the binary asset to download (e.g., autodock_Linux_x86_64)'
    required: false
    default: 'autodock_Linux_x86_64'


runs:
  using: "composite"
  steps:
    - name: Setup GitHub CLI
      shell: bash
      run: |
        echo "${{ github.token }}" | gh auth login --with-token
        gh config set prompt disabled

    - name: Get latest release tag
      id: get-release-tag
      shell: bash
      env:
        AUTODOCK_REPO: autodock-dev/autodock
      run: |
        echo "Value of AUTODOCK_REPO: '$AUTODOCK_REPO'"
        echo "Finding latest non-dev release for autodock"
        # The jq filter currently excludes "dev" tags, but your example found "v0.0.0-dev2".
        # This implies either no non-dev releases exist, or the filter needs adjustment if you want non-dev only.
        # For now, we'll assume the found tag is what you want to proceed with.
        LATEST_TAG=$(gh release list --repo "$AUTODOCK_REPO" --limit 20 --json tagName --jq 'map(select(.tagName | endswith("dev") | not)).[0].tagName')
        if [ -z "$LATEST_TAG" ]; then
          echo "Error: No releases found in $AUTODOCK_REPO"
          exit 1
        fi
        echo "Found latest release tag: $LATEST_TAG"
        echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

    - name: Download and Extract the Binary Asset
      id: download-binary
      shell: bash
      env:
        AUTODOCK_REPO: autodock-dev/autodock
      run: |
        DOWNLOAD_DIR='.'
        RELEASE_TAG="${{ steps.get-release-tag.outputs.latest_tag }}"
        INPUT_ASSET_BASE_NAME="${{ inputs.binary_asset_name }}" # e.g., autodock_Linux_x86_64
        ARCHIVE_NAME="${INPUT_ASSET_BASE_NAME}.tar.gz"           # e.g., autodock_Linux_x86_64.tar.gz
        
        echo "Downloading archive '$ARCHIVE_NAME' from release '$RELEASE_TAG'"

        gh release download "$RELEASE_TAG" \
          --repo "$AUTODOCK_REPO" \
          --pattern "$ARCHIVE_NAME" \
          --dir "$DOWNLOAD_DIR" \
          --clobber
        
        echo "Extracting '$ARCHIVE_NAME' to '$DOWNLOAD_DIR'..."
        tar -xzf "$DOWNLOAD_DIR/$ARCHIVE_NAME" -C "$DOWNLOAD_DIR"

        # Assuming Goreleaser places the executable named 'autodock' at the root of the archive.
        # Adjust 'autodock' here if the executable has a different name inside the archive.
        ACTUAL_BINARY_PATH="$DOWNLOAD_DIR/autodock" 

        if [ ! -f "$ACTUAL_BINARY_PATH" ]; then
          echo "Error: Expected binary '$ACTUAL_BINARY_PATH' not found after extraction."
          ls -R "$DOWNLOAD_DIR" # List contents to help debug if extraction fails
          exit 1
        fi

        chmod +x "$ACTUAL_BINARY_PATH"
        echo "Downloaded, extracted, and made executable: $ACTUAL_BINARY_PATH"
        echo "binary_path=$ACTUAL_BINARY_PATH" >> "$GITHUB_OUTPUT"

    - name: Run the downloaded binary
      shell: bash
      run: |
        COMPOSE_FILE="${{ inputs.compose_file_path }}"
        ADDITIONAL_ARGS="${{ inputs.args }}"
        BINARY_FULL_PATH="${{ steps.download-binary.outputs.binary_path }}"
        
        echo "Running: $BINARY_FULL_PATH -f $COMPOSE_FILE $ADDITIONAL_ARGS"
        # Assuming autodock expects -f before the compose file
        "$BINARY_FULL_PATH" -f "$COMPOSE_FILE" $ADDITIONAL_ARGS