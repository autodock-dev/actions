name: "Download and execute autodock"
description: "Download the latest autodock Linux AMD64 binary and run its deploy command"

inputs:
  compose_file_path:
    description: 'Optional path to a Docker Compose file'
    require: false
    default: './docker-compose.yml'

outputs: TODO

runs:
  using: "composite"
steps:
  - name: Set the constants
    echo "$AUTODOCK_REPO=autodock-dev/autodock" >> $GITHUB_ENV
  - name: Get latest release tag
    id: get-release-tag
    shell: bash
    # use gh CLI to find the latest tag
    run: |
      echo "Finding latest non-dev release for autodock"
      LATEST_TAG=$(gh release list --repo "{{ env.AUTODOCK_REPO }}" --limit 20 --json tagName --jq 'map(select(.tagName | endswith("dev") | not)).[0].tagName' --token "${{ github.token }}")
      if [ -z "$LATEST_TAG" ]; then
      echo "Error: No releases found in {{ env.AUTODOCK_REPO }}" # TODO: can I create a constant variable for the repo name?
        exit 1
      fi
      echo "Found latest release tag: $LATEST_TAG"
      echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

  - name: Download the binary asset
    id: download-binary
    shell: bash
    run: |
      DOWNLOAD_DIR='.'
      BINARY_FULL_PATH="$DOWNLOAD_DIR/autodock"
      echo "Downloading ${{ inputs.binary_asset_name }} from release ${{ steps.get-release-tag.outputs.latest_tag }} "
      gh release download "${{ steps.get-release-tag.outputs.latest_tag }}" \
        --repo "{{ env.AUTODOCK_REPO }}" \
        --pattern "autodock-linux-amd64*" \
        --dir "$DOWNLOAD_DIR" \
        --clobber \
        --token "${{ inputs.github_token }}" # Pass the token for cross-repo access
      chmod +x "$BINARY_FULL_PATH"
      echo "Downloaded and made executable: $BINARY_FULL_PATH"
      echo "binary_path=$BINARY_FULL_PATH" >> "$GITHUB_OUTPUT"

  - name: Run the downloaded binary
    shell: bash
    run: |
      BINARY_FULL_PATH="${{ steps.download-binary.outputs.binary_path }}"
      echo "Running: $BINARY_FULL_PATH ${{ inputs.binary_args }}"
      "$BINARY_FULL_PATH -f ${{ inputs.complse_file_path }} generate   # TODO: set up AWS credentials and change this to deploy
      cat ./bootstrap-template.yaml

