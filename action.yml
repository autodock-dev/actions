name: "Download and execute autodock"
description: "Download the latest autodock Linux AMD64 binary and run its deploy command"

inputs:
  compose_file_path:
    description: 'Optional path to a Docker Compose file'
    required: false
    default: './docker-compose.yml'
  args:
    description: 'arguments for autodock'
    required: false
    default: ""

env:
  AUTODOCK_REPO: autodock-dev/autodock


runs:
  using: "composite"
  steps:
    - name: Setup GitHub CLI
      shell: bash
      run: |
        # This ensures gh CLI is authenticated before use.
        # The GITHUB_TOKEN environment variable is automatically available at the job level.
        echo "${{ github.token }}" | gh auth login --with-token
        gh config set prompt disabled

    - name: Get latest release tag
      id: get-release-tag
      shell: bash
      # use gh CLI to find the latest tag
      run: |
        echo "Finding latest non-dev release for autodock"
        LATEST_TAG=$(gh release list --repo $AUTODOCK_REPO --limit 20 --json tagName --jq 'map(select(.tagName | endswith("dev") | not)).[0].tagName' --token "${{ github.token }}")
        if [ -z "$LATEST_TAG" ]; then
        echo "Error: No releases found in $AUTODOCK_REPO"
          exit 1
        fi
        echo "Found latest release tag: $LATEST_TAG"
        echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

    - name: Download the binary asset
      id: download-binary
      shell: bash
      run: |
        DOWNLOAD_DIR='.'
        BINARY_FULL_PATH="$DOWNLOAD_DIR/autodock"
        echo "Downloading ${{ inputs.binary_asset_name }} from release ${{ steps.get-release-tag.outputs.latest_tag }} "
        gh release download "${{ steps.get-release-tag.outputs.latest_tag }}" \
          --repo $AUTODOCK_REPO \
          --pattern "autodock-linux-amd64*" \
          --dir "$DOWNLOAD_DIR" \
          --clobber \
          --token "${{ github.token }}" # Pass the token for cross-repo access
        chmod +x "$BINARY_FULL_PATH"
        echo "Downloaded and made executable: $BINARY_FULL_PATH"
        echo "binary_path=$BINARY_FULL_PATH" >> "$GITHUB_OUTPUT"

    - name: Run the downloaded binary
      shell: bash
      run: |
        # Get the compose file path from inputs, defaulting if not provided
        COMPOSE_FILE="${{ inputs.compose_file_path }}"
        # Get any additional arguments provided to the action
        ADDITIONAL_ARGS="${{ inputs.args }}"
        BINARY_FULL_PATH="${{ steps.download-binary.outputs.binary_path }}"
        echo "Running: $BINARY_FULL_PATH $COMPOSE_FILE $ADDITIONAL_ARGS"
        "$BINARY_FULL_PATH $COMPOSE_FILE $ADDITIONAL_ARGS"   # TODO: set up AWS credentials and change this to deploy
        cat ./bootstrap-template.yaml

